Add 64-bit support
	* change all registers and CSRs to 64-bit
	* bit locations of certain CSR fields
	* change internal storage like pc, interrupt to be 64-bit
	* change all instructions to do 64-bit
	* add 32-bit instructions: 
		* register
		* imm 
		* load/store
		* M: trap for most instructions?
		* AMO
	* change Sv32 to Sv39
	* timer -> 64 bits
	* PLIC CSR size and R/W size
		* 32-bit R/W, walk through code to make sure that it's ok
		* should run, but more checking would be good, 32-bit access for PLIC and virtio, 8-bit access for UART
	** add S-level interrupt handling? SIP?


Reorganize code
	* cpu
	* SoC
	* simulator/driver

Current status:
	* code completed, builds, needs more cleanup
	* xv6 works on Ubuntu qemu, it has a nice assembly listing
	* a lot of testing needed
	* default build has C instructions, need to change Makefile, build with -march=rv64g
	* got the build fixed
	* hacked around the kernel image issue, now it's up and running
	* fixed some obvious issues
	* now stuck in printf uartoutput, somehow it thinks the kernel paniced?
	* need to figure out why it's stuck: printf(), consputc(), uartputc_sync()
	* related to image loading? bss segment.
	* hacked around it, now at least it can print out a message and then panic in kfree (address has a pa[32]==1, not right)
	* lui needs to sign extend in 64-bit version
	* now it crashes in 0x80007f28, timervec; probably something wrong with the interrupt handling
	* using an xv6 image produced using objcopy, it crashes in the same address but with a different address
	* traced and it's a double-timer call, timer interrupt while in a timer interrupt
	* srli decode was giving an error since 6-bit shift amount results in only 6-bit sub7
	* fixed, now it just runs forever
	* hasn't reached VM yet
	* false alarm due to my conditional breakpoints
	* now past kinit(), but memory error when in timervec again, it looks mscratch got messed up again
	* still a problem with SRL, fixed now
	* now panic in kvmmap, looks like panic when setting up the page tables
	* problem in allocating page table for kernel code, the size is incorrect
	* that was stupid, same issue with auipc, need to extend to 64-bit
	* now crashes in plicinit, some issue with I/O address
	* stupid typos with if then else if ...
	* now panic in virtio, not the values it expects, easy to fix
	* accessing some unimplemented I/O registers 0x70, a bunch of easy fixes
	* now a slightly harder one: the ring structures are updated to the new version, I need to modify to match
	* at least now it passes the virtio init
	* now crashes at forkret(), first process' scheduling?
	* sp seems wrong at 0x3_ffff_dff0; VA, could be my MMU bug
	* fixed a few more bugs, but page table still seems wrong
	* with MMU active, now it crashes after kvminit
	* A&D bits not updated?  commented it out for now
	* now crash in virtio, fixed an uninitialized variable bug
	* now it just hangs, could be the lack of timer; code is still executing, just not clear about the logic in xv6
	* should go through the entire interrupt logic
	* fixed some delegation and other stuff, but still not right, it appears that we are generating a timer interrupt before
		stvec is set but deleg is set already
		* deleg is set, mret to S-mode, but stvec not set yet
		* no obvious problems, go through it again tomorrow
	* cleaned up some interrupt logic and added support for SSI
	* timer interrupt timing seems off, timer update was wrong
	* interval is a bit long(1s vs 0.1s, but shouldn't make much difference)
	* external interrupt still not being handled correctly, added code to handle that
	* fixed some simple virtio code
	* virtio read and write were reversed
	* we should be at the point of starting the first process
	* problem in usertrapret
	* exception when we do address translation with the new memory map, have to understand it a little bit to
	  see why it's wrong
	* passed userinit(), should be in scheduler() now
	* userinit() creates the first process including its page table and scheduler runs it
	* problem w/ page table or address translation
	* finally found the problem, there is a 32-bit mask in jalr
	* now timer seems to be broken again, M timer not turning into S timer
	* reading a few more disk blocks, but otherwise still hangs
	* interrupt handling still seems incorrect: no S timer if I turn on the S external interrupt
	* kvminithart() sets kernel satp to 800ff; then there is satp to 800b2 (init process?)(b4, userret)
		then satp back to 800ff (a4, trampoline), then no more
	* traced into exec() system call from init
	* in sys_exec() now, does not seem to reach the end of exec()
	* does not reach the first readi() in exec(), but there is a disk read from sector 64 
	* that's from namei(), it appears that it doesn't get to the second read which is for the elf header
	* if I just it run normally, it can get to loadseg(4K, but only reads 2K); timer interrupt still not being turned into SSI
	* avail and used index bugs in virtio
	* now the shell starts and shows the $ prompt, but I can't type
	* probably still need to debug uart and timer
	* uart part is mostly working
	* now illegal instruction for ls, loaded incorrectly or got corrupted?
	* main areas left
		* uart
		* release mode just hangs
		* slowness: unnecessary waiting? race conditions? pipe in shell sometimes hangs 
			(loading two new processes that haven't been run before?)
	* almost there
	* ls was due to incorrect immediate extension when doing xori
	* now it's basically working, need a lot of cleanup
	* cleaned up timer and interrupts
	* MTIMER is being turned into SSOFTWARE although it's 2:1
	* fixed, now it's running correctly at 0.1s per tick and one M interrupt and then one S interrupt
	* cleaned up a bunch of warnings, but release mode still hangs, memory problem?

xv6 logic
	* scheduler(): finds a runnable process and swtch()
	* swtch(): restores context and does a ret(jump to ra) (initial ra is forkret(), set in allocproc())
	* forkret(): fsinit() for the first process; normally usertrapret()
	* usertrapret(): set stvec to uservec()(trampoline), set sepc to process' saved pc, jump to userret()
	* userret(): set satp to user pt, restore register and sret
	* sret goes to execute the process and init does an exec system call (which will be handled by uservec())
	* uservec(): save registers, load some info, set satp to kernel, and jump to usertrap()
	* usertrap(): set stvec to kernelvec(), then handle the interrupt(syscall() for system calls, devintr() for interrupts),
		and call usertrapret()
	* devintr(): if external interrupt, plic_claim() and hand off to uart or virtio, then plic_complete()
	* virtio_disk_intr(): set INTR_ACK, set flags to wake up process waiting for read data
	* seems to be wraparound issue as it hangs after 8 virtio requests and the queue size is 8

// SoC: check to see if we should generate an interrupt
// return value: interrupt, 0 if no interrupt
// interrupt rules: 
// 1. CLINT responsible for setting MTIP, cleared by settting TIMERCMP
// 2. PLIC responsible for setting SEIP (expected by xv6, in real world should be dependent on where PLIC is hooked up, the
//		PLIC spec is kind of confusing, and the diagram shows two signal lines for M/S mode, apparently it depends on the
//		delegation as well, we'l use SEIP for now), cleared by writing to PLIC completion register(same as CLAIM register)
// 3. SSIP set by software or external hart, cleared by software/external hart; no automatic change
// 4. traps in M-mode or (!delegated in S/U) mode go to M hanlder
// 5. traps in S/U mode and delegated go to S handler
// 6. exceptions are always taken regardless of enable bits?
// 7. interrupts are only taken when both status and ie bits are set?
//
// We'll structure it as:
// 1. CLINT and PLIC responsible for setting/unsetting pending bits
// 2. CPU decides whether to handle an interrupt
	* any exceptions are always taken?
	* interrupt taken if both status and ie bits are set?
	* M handler unless in S/U mode and delegate bit is set for the current interrupt
