Add 64-bit support
	* change all registers and CSRs to 64-bit
	* bit locations of certain CSR fields
	* change internal storage like pc, interrupt to be 64-bit
	* change all instructions to do 64-bit
	* add 32-bit instructions: 
		* register
		* imm 
		* load/store
		* M: trap for most instructions?
		* AMO
	* change Sv32 to Sv39
	* timer -> 64 bits
	* PLIC CSR size and R/W size
		* 32-bit R/W, walk through code to make sure that it's ok
		* should run, but more checking would be good, 32-bit access for PLIC and virtio, 8-bit access for UART
	** add S-level interrupt handling? SIP?


Reorganize code
	* cpu
	* SoC
	* simulator/driver

Current status:
	* code completed, builds, needs more cleanup
	* xv6 works on Ubuntu qemu, it has a nice assembly listing
	* a lot of testing needed
	* default build has C instructions, need to change Makefile, build with -march=rv64g
	* got the build fixed
	* hacked around the kernel image issue, now it's up and running
	* fixed some obvious issues
	* now stuck in printf uartoutput, somehow it thinks the kernel paniced?
	* need to figure out why it's stuck: printf(), consputc(), uartputc_sync()
	* related to image loading? bss segment.
	* hacked around it, now at least it can print out a message and then panic in kfree (address has a pa[32]==1, not right)
	* lui needs to sign extend in 64-bit version
	* now it crashes in 0x80007f28, timervec; probably something wrong with the interrupt handling
	* using an xv6 image produced using objcopy, it crashes in the same address but with a different address
	* traced and it's a double-timer call, timer interrupt while in a timer interrupt
	* srli decode was giving an error since 6-bit shift amount results in only 6-bit sub7
	* fixed, now it just runs forever
	* hasn't reached VM yet
	* false alarm due to my conditional breakpoints
	* now past kinit(), but memory error when in timervec again, it looks mscratch got messed up again
	* still a problem with SRL, fixed now
	* now panic in kvmmap, looks like panic when setting up the page tables
	* problem in allocating page table for kernel code, the size is incorrect
	* that was stupid, same issue with auipc, need to extend to 64-bit
	* now crashes in plicinit, some issue with I/O address
	* stupid typos with if then else if ...
	* now panic in virtio, not the values it expects, easy to fix
	* accessing some unimplemented I/O registers 0x70, a bunch of easy fixes
	* now a slightly harder one: the ring structures are updated to the new version, I need to modify to match
	* at least now it passes the virtio init
	* now crashes at forkret(), first process' scheduling?
	* sp seems wrong at 0x3_ffff_dff0; VA, could be my MMU bug
	* fixed a few more bugs, but page table still seems wrong
	* with MMU active, now it crashes after kvminit
	* A&D bits not updated?  commented it out for now
	* now crash in virtio, fixed an uninitialized variable bug
	* now it just hangs, could be the lack of timer
	* should go through the entire interrupt logic



Usage scenarioes:
1. simple machine code
2. Linux image plus dtb
3. xv6 image plus file system
